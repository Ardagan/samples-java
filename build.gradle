plugins {
    id 'net.minecrell.licenser' version '0.3'
    id "com.github.sherter.google-java-format" version "0.6"
    id "net.ltgt.errorprone" version "0.6"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.sherter.google-java-format'

googleJavaFormat {
    toolVersion '1.5'
    include '**/*.java'
    exclude '**/generated-sources/*'
}

group = 'com.uber'
version = '0.0.1'

description = """Samples for Temporal. Based on samples for AWS SWF"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    mavenCentral()
}

dependencies {
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
    errorprone("com.google.errorprone:error_prone_core:2.3.1")
    //compile group: 'io.temporal', name: 'temporal-client', version: '2.6.0'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.9'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.7.3'

    implementation files('/Users/maxim/temporal/temporal-java-client/build/libs/temporal-java-client-1.0.0.jar')
    compile group: 'io.grpc', name: 'grpc-testing', version: '1.28.0'
    implementation 'io.grpc:grpc-netty-shaded:1.28.0'
    implementation 'io.grpc:grpc-protobuf:1.28.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    compile group: 'com.google.guava', name: 'guava', version: '28.1-jre'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.8.0'
    compile group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: '1.17.0'
    compile group: 'com.uber.m3', name: 'tally-core', version: '0.4.0'
    implementation 'io.grpc:grpc-stub:1.28.0'
    compile group: 'io.micrometer', name: 'micrometer-core', version: '1.1.2'
}

compileJava {
    dependsOn 'googleJavaFormat'
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.errorprone.errorproneArgs << "-XepExcludedPaths:.*/generated-sources/.*"
}

task execute(type: JavaExec) {
    main = findProperty("mainClass") ?: ""
    classpath = sourceSets.main.runtimeClasspath
}

license {
    header rootProject.file('license-header.txt')
}
